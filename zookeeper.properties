# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################ Basic Server Configurations ##################################

# The location where ZooKeeper will store the in-memory database snapshots and,
# unless specified otherwise, the transaction log of updates to the database.
dataDir=/var/lib/redhat-amq-streams/zookeeper

# Limits the number of concurrent connections (at the socket level) that a single client,
# identified by IP address, may make to a single member of the ZooKeeper ensemble.
#
# This is used to prevent certain classes of DoS attacks, including file descriptor exhaustion.
# The default is 60. Setting this to 0 entirely removes the limit on concurrent connections.
maxClientCnxns=0

# Disable the adminserver by default to avoid port conflicts.
# Set the port to something non-conflicting if choosing to enable this
admin.enableServer=false
# admin.serverPort=8080

# Amount of time, in ticks (see tickTime), to allow followers to connect and sync to a leader.
# Increased this value as needed, if the amount of data managed by ZooKeeper is large.
initLimit=5

# Amount of time, in ticks (see tickTime), to allow followers to sync with ZooKeeper.
# If followers fall too far behind a leader, they will be dropped.
syncLimit=2

# The length of a single tick, which is the basic time unit used by ZooKeeper, as measured in milliseconds.
# It is used to regulate heartbeats, and timeouts. For example, the minimum session timeout will be two ticks.
tickTime=2000

# New in 3.5.3: A list of comma separated Four Letter Words commands that user wants to use.
# A valid Four Letter Words command must be put in this list else ZooKeeper server will not enable the command.
# By default the whitelist only contains "srvr" command which zkServer.sh uses.
# The rest of four letter word commands are disabled by default.
4lw.commands.whitelist=*

# New in 3.5.3: This controls the enabling or disabling of Dynamic Reconfiguration feature.
# When the feature is enabled, users can perform reconfigure operations through the ZooKeeper client API
# or through ZooKeeper command line tools assuming users are authorized to perform such operations.
#
# When the feature is disabled, no user, including the super user, can perform a reconfiguration.
# Any attempt to reconfigure will return an error. "reconfigEnabled" option can be set as "reconfigEnabled=false"
# or "reconfigEnabled=true" to a server's config file, or using QuorumPeerConfig's setReconfigEnabled method.
# The default value is false.
#
#If present, the value should be consistent across every server in the entire ensemble.
#Setting the value as true on some servers and false on other servers will cause inconsistent behavior
# depending on which server is elected as leader. If the leader has a setting of "reconfigEnabled=true",
# then the ensemble will have reconfig feature enabled. If the leader has a setting of "reconfigEnabled=false",
# then the ensemble will have reconfig feature disabled. It is thus recommended to have a consistent value
# for "reconfigEnabled" across servers in the ensemble.
reconfigEnabled=true

# New in 3.5.0: When set to false, a single server can be started in replicated mode,
# a lone participant can run with observers, and a cluster can reconfigure down to one node,
# and up from one node. The default is true for backwards compatibility.
# It can be set using QuorumPeerConfig's setStandaloneEnabled method or by adding
# "standaloneEnabled=false" or "standaloneEnabled=true" to a server's config file.
standaloneEnabled=false

# Starting with 3.5.0 we're distinguishing between dynamic configuration parameters,
# which can be changed during runtime, and static configuration parameters,
# which are read from a configuration file when a server boots and don't change during
# its execution. For now, the following configuration keywords are considered part of
# the dynamic configuration: server, group and weight.
dynamicConfigFile=/opt/redhat-amq-streams/config/zookeeper.dynamic.properties

# The port to listen on for secure client connections using SSL. clientPort specifies the port
# for plaintext connections while secureClientPort specifies the port for SSL connections.
# Specifying both enables mixed-mode while omitting either will disable that mode.
#
# Note that SSL feature will be enabled when user plugs-in zookeeper.serverCnxnFactory,
# zookeeper.clientCnxnSocket as Netty.
secureClientPort=2182
serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory

############################ Security Settings ##########################################

# client-to-server SSL/TLS connection encryption i.e. Kafka to ZK connection
ssl.keyStore.location=/opt/redhat-amq-streams/config/keystore.jks
ssl.keyStore.password=secret@Password!
ssl.trustStore.location=/opt/redhat-amq-streams/config/truststore.jks
ssl.trustStore.password=secret@Password!
ssl.clientAuth=none

# server-to-server SSL/TLS connection encryption i.e. ZK to ZK connection
sslQuorum=true
ssl.quorum.keyStore.location=/opt/redhat-amq-streams/config/keystore.jks
ssl.quorum.keyStore.password=secret@Password!
ssl.quorum.trustStore.location=/opt/redhat-amq-streams/config/truststore.jks
ssl.quorum.trustStore.password=secret@Password!

# server-to-server authentication i.e. ZK to ZK connection
quorum.auth.enableSasl=true
quorum.auth.learnerRequireSasl=true
quorum.auth.serverRequireSasl=true
quorum.auth.learner.saslLoginContext=QuorumLearner
quorum.auth.server.saslLoginContext=QuorumServer
quorum.cnxn.threads.size=20

# client-to-server authentication i.e. Kafka to ZK connection
requireClientAuthScheme=sasl
authProvider.sasl=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
jaasLoginRenew=3600000
